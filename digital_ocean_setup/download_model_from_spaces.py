#!/usr/bin/env python3
"""
Script ƒë∆°n gi·∫£n ƒë·ªÉ download model ƒë√£ train t·ª´ DigitalOcean Spaces v·ªÅ local
"""

import os
import sys
import boto3
import logging
from pathlib import Path

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def setup_spaces_client():
    """Setup Digital Ocean Spaces client"""
    access_key = os.getenv('SPACES_ACCESS_KEY','DO00DY94RFHXGEX7BK2B')
    secret_key = os.getenv('SPACES_SECRET_KEY','qxssv4A4kBvDu5GHIns+CzBRVPN8CDNfH8o5AXyHf7s')
    endpoint = os.getenv('SPACES_ENDPOINT', 'https://sfo3.digitaloceanspaces.com')
    
    if not access_key or not secret_key:
        logger.error("‚ùå C·∫ßn set SPACES_ACCESS_KEY v√† SPACES_SECRET_KEY!")
        sys.exit(1)
    
    # Extract region from endpoint
    region = 'sgp1' if 'sgp1' in endpoint else 'sfo3'
    
    client = boto3.client(
        's3',
        aws_access_key_id=access_key,
        aws_secret_access_key=secret_key,
        endpoint_url=endpoint,
        region_name=region
    )
    
    logger.info(f"‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi Spaces: {endpoint}")
    return client

def list_available_models(spaces_client, bucket_name):
    """List all available models in Spaces"""
    logger.info(f"üìã Li·ªát k√™ models c√≥ s·∫µn trong bucket '{bucket_name}'...")
    
    try:
        response = spaces_client.list_objects_v2(
            Bucket=bucket_name,
            Prefix='models/',
            Delimiter='/'
        )
        
        if 'CommonPrefixes' not in response:
            logger.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y model n√†o trong Spaces!")
            return []
        
        models = []
        for prefix in response['CommonPrefixes']:
            model_path = prefix['Prefix'].rstrip('/')
            models.append(model_path)
        
        logger.info(f"‚úÖ T√¨m th·∫•y {len(models)} model(s):")
        for i, model in enumerate(models, 1):
            logger.info(f"   {i}. {model}")
        
        return models
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi list models: {e}")
        return []

def download_model(spaces_client, bucket_name, model_prefix, local_dir='./models'):
    """Download model t·ª´ Spaces v·ªÅ local"""
    logger.info(f"üì• ƒêang download model t·ª´ '{model_prefix}'...")
    
    # T·∫°o th∆∞ m·ª•c local
    local_path = Path(local_dir)
    local_path.mkdir(parents=True, exist_ok=True)
    
    try:
        # List all files trong model prefix
        response = spaces_client.list_objects_v2(
            Bucket=bucket_name,
            Prefix=model_prefix
        )
        
        if 'Contents' not in response:
            logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file n√†o trong '{model_prefix}'")
            return False
        
        files = response['Contents']
        logger.info(f"üì¶ T√¨m th·∫•y {len(files)} file(s) ƒë·ªÉ download")
        
        # Download t·ª´ng file
        downloaded_count = 0
        for obj in files:
            s3_key = obj['Key']
            
            # Skip n·∫øu l√† folder
            if s3_key.endswith('/'):
                continue
            
            # T·∫°o relative path
            relative_path = s3_key.replace(model_prefix + '/', '')
            local_file_path = local_path / relative_path
            
            # T·∫°o parent directories
            local_file_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Download file
            logger.info(f"   Downloading: {relative_path}")
            spaces_client.download_file(
                bucket_name,
                s3_key,
                str(local_file_path)
            )
            downloaded_count += 1
        
        logger.info(f"‚úÖ ƒê√£ download {downloaded_count} file(s) v√†o '{local_path}'")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi download model: {e}")
        return False

def main():
    """Main function"""
    logger.info("üöÄ B·∫Øt ƒë·∫ßu download model t·ª´ DigitalOcean Spaces")
    
    # L·∫•y config t·ª´ environment
    bucket_name = os.getenv('SPACES_BUCKET', 'legal-datalake')
    model_path = os.getenv('MODEL_PATH', '')
    local_dir = os.getenv('LOCAL_MODEL_DIR', './models')
    
    logger.info(f"üìã Configuration:")
    logger.info(f"   Bucket: {bucket_name}")
    logger.info(f"   Local dir: {local_dir}")
    
    # Setup client
    spaces_client = setup_spaces_client()
    
    # List available models
    available_models = list_available_models(spaces_client, bucket_name)
    
    if not available_models:
        logger.error("‚ùå Kh√¥ng c√≥ model n√†o ƒë·ªÉ download!")
        sys.exit(1)
    
    # N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh MODEL_PATH, s·ª≠ d·ª•ng model m·ªõi nh·∫•t
    if not model_path:
        model_path = available_models[-1]  # L·∫•y model cu·ªëi (m·ªõi nh·∫•t)
        logger.info(f"üí° T·ª± ƒë·ªông ch·ªçn model m·ªõi nh·∫•t: {model_path}")
    else:
        # Ki·ªÉm tra xem model_path c√≥ trong danh s√°ch kh√¥ng
        if model_path not in available_models:
            logger.warning(f"‚ö†Ô∏è Model '{model_path}' kh√¥ng t·ªìn t·∫°i!")
            logger.info("üí° S·ª≠ d·ª•ng model m·ªõi nh·∫•t thay th·∫ø")
            model_path = available_models[-1]
    
    # Download model
    success = download_model(spaces_client, bucket_name, model_path, local_dir)
    
    if success:
        logger.info("üéâ Download model th√†nh c√¥ng!")
        logger.info(f"üìç Model path: {local_dir}")
    else:
        logger.error("‚ùå Download model th·∫•t b·∫°i!")
        sys.exit(1)

if __name__ == "__main__":
    main()
