#!/usr/bin/env python3
"""
Script ƒë·ªÉ download model cho serving:
- Download baseline model t·ª´ Hugging Face (RECOMMENDED)
"""

import logging
from pathlib import Path
from huggingface_hub import snapshot_download

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def download_baseline_model(model_name, local_dir='./models'):
    """
    Download baseline model t·ª´ Hugging Face
    
    Args:
        model_name: T√™n model tr√™n Hugging Face (v√≠ d·ª•: 'BAAI/bge-m3')
        local_dir: Th∆∞ m·ª•c l∆∞u model
    """
    logger.info("=" * 70)
    logger.info("üéØ DOWNLOADING BASELINE MODEL (RECOMMENDED)")
    logger.info("=" * 70)
    logger.info(f"üì¶ Model: {model_name}")
    logger.info(f"üìÅ Local directory: {local_dir}")
    
    try:
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        local_path = Path(local_dir)
        local_path.mkdir(parents=True, exist_ok=True)
        
        logger.info(f"‚¨áÔ∏è  Downloading from Hugging Face...")
        
        # Download model t·ª´ Hugging Face
        snapshot_download(
            repo_id=model_name,
            local_dir=local_dir,
            local_dir_use_symlinks=False,
            resume_download=True
        )
        
        logger.info("‚úÖ Baseline model downloaded successfully!")
        logger.info(f"üìç Model path: {local_dir}")
        logger.info("")
        logger.info("üí° Model n√†y ch∆∞a ƒë∆∞·ª£c fine-tune, ph√π h·ª£p cho serving")
        logger.info("   v√¨ baseline model c√≥ performance t·ªët h∆°n fine-tuned model.")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi download baseline model: {e}")
        return False


def main():
    """
    Main function ƒë·ªÉ download model cho serving
    """
    # Configuration
    MODEL_NAME = "BAAI/bge-m3"  # Baseline model ƒë∆∞·ª£c recommend
    LOCAL_DIR = "./models/bge-m3"
    
    logger.info("üöÄ Starting model download process...")
    logger.info("")
    
    # Download baseline model
    success = download_baseline_model(MODEL_NAME, LOCAL_DIR)
    
    if success:
        logger.info("")
        logger.info("=" * 70)
        logger.info("‚ú® DOWNLOAD COMPLETED SUCCESSFULLY!")
        logger.info("=" * 70)
        logger.info(f"üìÇ Model location: {LOCAL_DIR}")
        logger.info("")
        logger.info("üìã Next steps:")
        logger.info("   1. S·ª≠ d·ª•ng model n√†y cho serving v·ªõi serve_model.py")
        logger.info("   2. Model ƒë√£ s·∫µn s√†ng ƒë·ªÉ ph·ª•c v·ª• requests")
        logger.info("")
    else:
        logger.error("")
        logger.error("=" * 70)
        logger.error("‚ùå DOWNLOAD FAILED")
        logger.error("=" * 70)
        logger.error("Vui l√≤ng ki·ªÉm tra l·∫°i network v√† th·ª≠ l·∫°i.")
        exit(1)


if __name__ == "__main__":
    main()
